import 'dart:async';
import 'package:dyte_uikit/dyte_uikit.dart';
import 'package:flutter/foundation.dart';

class DyteService {
  static final DyteService _instance = DyteService._internal();
  factory DyteService() => _instance;
  DyteService._internal();

  DyteMeetingInfoV2? _meetingInfo;
  bool _isInitialized = false;
  
  // Stream controllers for callbacks
  final StreamController<bool> _connectionController = StreamController<bool>.broadcast();

  // Getters
  DyteMeetingInfoV2? get meetingInfo => _meetingInfo;
  bool get isInitialized => _isInitialized;
  
  Stream<bool> get connectionStream => _connectionController.stream;

  /// Initialize Dyte meeting with auth token
  Future<bool> initializeMeeting({
    required String authToken,
    String? roomName,
    String? participantName,
    String? participantId,
  }) async {
    try {
      if (_isInitialized) {
        await dispose();
      }

      // Create meeting info using the new UI Kit approach
      _meetingInfo = DyteMeetingInfoV2(authToken: authToken);
      
      _isInitialized = true;
      _connectionController.add(true);
      
      if (kDebugMode) {
        print('Dyte meeting initialized successfully');
      }
      
      return true;
    } catch (e) {
      if (kDebugMode) {
        print('Error initializing Dyte meeting: $e');
      }
      _connectionController.add(false);
      return false;
    }
  }

  /// Dispose resources
  Future<void> dispose() async {
    try {
      _meetingInfo = null;
      _isInitialized = false;
      
      await _connectionController.close();
    } catch (e) {
      if (kDebugMode) {
        print('Error disposing Dyte service: $e');
      }
    }
  }

  /// Generate auth token (this should be done on your backend)
  /// For demo purposes, we'll return a placeholder
  static String generateAuthToken({
    required String roomName,
    required String participantName,
    String? participantId,
  }) {
    // In a real app, this should be generated by your backend
    // This is just a placeholder for demo purposes
    //return 'demo_auth_token_${DateTime.now().millisecondsSinceEpoch}';
    return "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJvcmdJZCI6ImE1MDI5ODdlLTc5ZTUtNDY2NS1iYWFkLWI0NjY1YjliM2VmYyIsIm1lZXRpbmdJZCI6ImJiYmJlNmVlLWRlYTEtNGJhMC1iMDM3LWJmYmEzYTRmODYxZiIsInBhcnRpY2lwYW50SWQiOiJhYWE2YWZiYS0yNDAxLTRmZTUtYjJjMC01Yjg3ODFjMDc4M2QiLCJwcmVzZXRJZCI6IjNhYWIwZDc5LWM4MjAtNDkzOS04MzYyLTM1YjBiZjU1ZWRhMiIsImlhdCI6MTc2MDY5MTkyNSwiZXhwIjoxNzY5MzMxOTI1fQ.R_FGFFbrQfHK8do1Oqd84JMtYndzB_WEwmnWrCHEtzkacXyransQQhrT8DYLKEsA18hLYbpT5NbEzaMEmTG4ksAXAT1qbNTyIQiAiDTnN41ZvyKG6hoSLT3D8LNJJY2Ig0HJWCawrc5bp2FbKePfp0wtah4y-zffVVoZH-mn8opFBiWWeTlaIH8ImRth8HhcHDG8zab-8A_rIO-gFARW98e2w16M-rcPwi_rbEIvJHd9Q8c0fLfmFKQPA7S_xL-20DqwY8F_F-4TqFJT4tBkHq6d-T1ZlS_XJ_0a9AWqwD6lywpJQQBNgglyHiSjPBsCuQUtnJi71dg_BUOYCD96yQ";
  }

  /// Create meeting room (this should be done on your backend)
  /// For demo purposes, we'll return a placeholder room name
  static String generateRoomName() {
    // In a real app, this should be created by your backend
    // This is just a placeholder for demo purposes
    return 'room_${DateTime.now().millisecondsSinceEpoch}';
  }
}
